hexchar = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f']

hexinput = []
for i in range(16):
	for j in range(16):
		for k in range(16):
			current = hexchar[i] + hexchar[j] + hexchar[k]
			#print(current)
			hexinput.append(current)
						
final = ''.join(hexinput)
#print(final[:])
#print(len(final))




encoded = ''

mapping = {}
for i in range(4096):
	hexkey = encoded[i*2:(i+1)*2]
	hexval = final[i*3:(i+1)*3]
	mapping[hexkey] = hexval

flagencoded = 'r6u3uUn1y8Fhv6zjTfz6vAzOYv48us6dTcA7QUT8TRFjaI4Ivl8H'

flag = []
for i in range(len(flagencoded)//2):
	hexkey = flagencoded[i*2:(i+1)*2]
	flag.append(mapping[hexkey])
	

print(bytes.fromhex(''.join(flag)).decode())
